import {
  core.c-int {C-Int, c-int, from-c-int},
  core.c-string {c-string, from-c-string, to-c-string},
  core.memory {load-int8, load-pointer},
  core.text {replace},
  time.time {from-ISO8601, time},
}

foreign {
  PQnfields(pointer): c-int,
  PQntuples(pointer): c-int,
  PQgetvalue(pointer, c-int, c-int): pointer,
  PQfnumber(pointer, pointer): c-int,
  strtol(pointer, pointer, c-int): int,
  strtod(pointer, pointer): float,
}

data table {}

define get-column-size(r: &table): int {
  from-c-int(magic external PQnfields(magic cast(&table, pointer, r)))
}

define get-row-size(r: &table): int {
  from-c-int(magic external PQntuples(magic cast(&table, pointer, r)))
}

data encoder-error {
| Unknown-Column(column-name: text)
| Int-Parse-Error(row: int, column: int, input: text)
| Float-Parse-Error(row: int, column: int, input: text)
| Time-Parse-Error(row: int, column: int, input: text)
}

inline _to-c-int(x: int): c-int {
  let x = trunc-int-int32(x);
  C-Int(x)
}

define get-column-by-name(r: &table, column-name: &text): either(encoder-error, int) {
  pin c-column-name = to-c-string(column-name);
  let result =
    magic external PQfnumber(
      magic cast(&table, pointer, r),
      magic cast(&c-string, pointer, c-column-name),
    );
  let result = from-c-int(result);
  if ge-int(result, 0) {
    Right(result)
  } else {
    Left(Unknown-Column(*column-name))
  }
}

inline encode-int(r: &table, row: int, column: int): either(encoder-error, int) {
  let r' = magic cast(&table, pointer, r);
  let c-int-str = magic cast(pointer, &c-string, magic external PQgetvalue(r', _to-c-int(row), _to-c-int(column)));
  let end-ptr = magic alloca(int, 1);
  let int-val: int =
    magic external strtol(
      magic cast(&c-string, pointer, c-int-str),
      end-ptr,
      10,
    );
  let end-char-ptr = load-pointer(end-ptr);
  let end-char = load-int8(end-char-ptr);
  if eq-int8(end-char, 0) {
    Right(int-val)
  } else {
    Left(Int-Parse-Error(row, column, from-c-string(c-int-str)))
  }
}

inline encode-float(r: &table, row: int, column: int): either(encoder-error, float) {
  let c-float-str =
    magic external PQgetvalue(
      magic cast(&table, pointer, r),
      _to-c-int(row),
      _to-c-int(column),
    );
  let end-ptr = magic alloca(int, 1);
  let float-val: float = magic external strtod(c-float-str, end-ptr);
  let end-char-ptr = load-pointer(end-ptr);
  let end-char = load-int8(end-char-ptr);
  if eq-int8(end-char, 0) {
    Right(float-val)
  } else {
    Left(Float-Parse-Error(row, column, from-c-string(magic cast(pointer, &c-string, c-float-str))))
  }
}

inline encode-text(r: &table, row: int, column: int): either(encoder-error, text) {
  let r = magic cast(&table, pointer, r);
  let row = _to-c-int(row);
  let column = _to-c-int(column);
  Right(from-c-string(magic cast(pointer, &c-string, magic external PQgetvalue(r, row, column))))
}

inline encode-time(r: &table, row: int, column: int): either(encoder-error, time) {
  let r = magic cast(&table, pointer, r);
  let row' = _to-c-int(row);
  let column' = _to-c-int(column);
  let date-text = from-c-string(magic cast(pointer, &c-string, magic external PQgetvalue(r, row', column')));
  let date-text' on date-text = replace(date-text, " ", *"T");
  let time-or-none on date-text' = from-ISO8601(date-text');
  let _ = date-text';
  match time-or-none {
  | Right(t) =>
    let _ = date-text;
    Right(t)
  | Left(_) =>
    Left(Time-Parse-Error(row, column, date-text))
  }
}
