import {
  core.c-string {c-string, from-c-string, to-c-string},
  core.memory {load-int, load-int8},
  core.pointer {_Pointer},
  core.text {replace},
  time.time {from-ISO8601, time},
}

foreign {
  PQnfields(pointer): int,
  PQntuples(pointer): int,
  PQgetvalue(pointer, int, int): pointer,
  PQfnumber(pointer, pointer): int,
  strtol(pointer, pointer, int): int,
  strtod(pointer, pointer): float,
}

data table {}

define get-column-size(r: &table): int {
  magic external PQnfields(r)
}

define get-row-size(r: &table): int {
  magic external PQntuples(r)
}

data encoder-error {
| Unknown-Column(column-name: text)
| Int-Parse-Error(row: int, column: int, input: text)
| Float-Parse-Error(row: int, column: int, input: text)
| Time-Parse-Error(row: int, column: int, input: text)
}

define get-column-by-name(r: &table, column-name: &text): either(encoder-error, int) {
  pin c-column-name = to-c-string(column-name) in
  let result = magic external PQfnumber(r, c-column-name) in
  if ge-int32(result, 0) {
    Right(zext-int32-int(result))
  } else {
    Left(Unknown-Column(*column-name))
  }
}

inline encode-int(r: &table, row: int, column: int): either(encoder-error, int) {
  let c-int-str: &c-string = magic external PQgetvalue(r, row, column) in
  let end-ptr = _Pointer(magic alloca(int, 1)) in
  let base: int = 10 in
  let int-val: int = magic external strtol(c-int-str, end-ptr, base) in
  let end-char-ptr = _Pointer(load-int(end-ptr)) in
  let end-char = load-int8(end-char-ptr) in
  if eq-int8(end-char, 0) {
    Right(int-val)
  } else {
    Left(Int-Parse-Error(row, column, from-c-string(c-int-str)))
  }
}

inline encode-float(r: &table, row: int, column: int): either(encoder-error, float) {
  let c-float-str: &c-string = magic external PQgetvalue(r, row, column) in
  let end-ptr = _Pointer(magic alloca(int, 1)) in
  let float-val: float = magic external strtod(c-float-str, end-ptr) in
  let end-char-ptr = _Pointer(load-int(end-ptr)) in
  let end-char = load-int8(end-char-ptr) in
  if eq-int8(end-char, 0) {
    Right(float-val)
  } else {
    Left(Float-Parse-Error(row, column, from-c-string(c-float-str)))
  }
}

inline encode-text(r: &table, row: int, column: int): either(encoder-error, text) {
  Right(from-c-string(magic external PQgetvalue(r, row, column)))
}

inline encode-time(r: &table, row: int, column: int): either(encoder-error, time) {
  let date-text = from-c-string(magic external PQgetvalue(r, row, column)) in
  let date-text' on date-text = replace(date-text, " ", *"T") in
  let time-or-none on date-text' = from-ISO8601(date-text') in
  let _ = date-text' in
  match time-or-none {
  | Right(t) =>
    let _ = date-text in
    Right(t)
  | Left(_) =>
    Left(Time-Parse-Error(row, column, date-text))
  }
}
