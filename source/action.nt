import {
  core.c-string {c-string, to-c-string},
  core.control {discard},
  core.list {length},
  core.magic,
  core.memory {store-int},
  core.pointer {null-pointer, shift},
  core.word,
  this.command {Command, command},
  this.connection {_from-c-string-pointer, connection},
  this.foreign {
    OID_SIZE,
    PGRES_COMMAND_OK,
    PGRES_TUPLES_OK,
  },
  this.parameter {Prepared-Command, _prepare, preparation-error, sql-param},
  this.table {encoder-error, table},
}

foreign {
  PQexec(pointer, pointer): pointer,
  PQexecParams(pointer, pointer, int, pointer, pointer, pointer, pointer, int): pointer,
  PQresultStatus(pointer): int,
  PQresultErrorMessage(pointer): pointer,
  PQclear(pointer): void,
}

data error {
| Preparation-Error(preparation-error)
| Command-Error(status: int, message: text)
| Encoder-Error(detail: encoder-error)
}

define _store-elems(elems: &list(sql-param), ptr: pointer): unit {
  case elems {
  | Nil =>
    Unit
  | Cons(Pair(_, x), xs) =>
    store-int(core.magic.cast(&c-string, int, x), ptr);
    _store-elems(xs, shift(ptr, core.word.size))
  }
}

define _store-oids(elems: &list(sql-param), ptr: pointer): unit {
  case elems {
  | Nil =>
    Unit
  | Cons(Pair(oid, _), xs) =>
    store-int(*oid, ptr);
    _store-oids(xs, shift(ptr, OID_SIZE))
  }
}

define _command-completed-p(status: int): bool {
  if eq-int(status, PGRES_COMMAND_OK) {
    True
  } else-if eq-int(status, PGRES_TUPLES_OK) {
    True
  } else {
    False
  }
}

define batch(c: &connection, com: &text): either(error, unit) {
  pin com = to-c-string(com) in
  let result =
    magic external PQexec(
      magic cast(&connection, pointer, c),
      magic cast(&c-string, pointer, com),
    )
  in
  let status = magic external PQresultStatus(result) in
  if _command-completed-p(status) {
    let _ = magic external PQclear(result) in
    Right(Unit)
  } else {
    let error-message = _from-c-string-pointer(magic external PQresultErrorMessage(result)) in
    let _ = magic external PQclear(result) in
    Left(Command-Error(status, error-message))
  }
}

define begin(c: &connection): either(error, unit) {
  batch(c, "begin")
}

define commit(c: &connection): either(error, unit) {
  batch(c, "commit")
}

define rollback(c: &connection): either(error, unit) {
  batch(c, "rollback")
}

define with-transaction<a>(c: &connection, action: () -> either(error, a)): either(error, a) {
  try _ = begin(c) in
  match action() {
  | Right(result) =>
    try _ = commit(c) in
    Right(result)
  | Left(e) =>
    try _ = rollback(c) in
    Left(e)
  }
}

constant zero: int {
  0
}

inline _exec-params(
  c: &connection,
  template: text,
  parameters: list(sql-param),
): pointer {
  let num-of-params on parameters = length(parameters) in
  let param-values = magic alloca(int, num-of-params) in
  let param-types = magic alloca(int, num-of-params) in
  let _ on parameters = _store-elems(parameters, param-values) in
  let _ on parameters = _store-oids(parameters, param-types) in
  let result: pointer on template =
    pin template = to-c-string(template) in
    magic external PQexecParams(
      magic cast(&connection, pointer, c),
      magic cast(&c-string, pointer, template),
      num-of-params,
      param-types,
      param-values,
      null-pointer,
      null-pointer,
      zero,
    )
  in
  discard(parameters);
  discard(template);
  result
}

inline execute<a>(conn: &connection, com: command(a)): either(error, a) {
  let Command of {template, parameters, result-encoder} = com in
  match _prepare(template, parameters) {
  | Left(e) =>
    Left(Preparation-Error(e))
  | Right(Prepared-Command(template, parameters)) =>
    let result = _exec-params(conn, template, parameters) in
    let status = magic external PQresultStatus(result) in
    if _command-completed-p(status) {
      let encoded-result = result-encoder(magic cast(pointer, &table, result)) in
      let _ = magic external PQclear(result) in
      match encoded-result {
      | Right(v) =>
        Right(v)
      | Left(e) =>
        Left(Encoder-Error(e))
      }
    } else {
      // ignore COPY commands for now
      let error-message = _from-c-string-pointer(magic external PQresultErrorMessage(result)) in
      let _ = magic external PQclear(result) in
      Left(Command-Error(status, error-message))
    }
  }
}
