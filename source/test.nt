import {
  core.float.show {show-float},
  core.list {iterate-E},
  core.text.io {print-line},
  this.action {Command-Error, Encoder-Error, Preparation-Error, batch, execute, with-transaction},
  this.command {Command, command},
  this.connection {Conn-Info, Connection-Error, connect},
  this.parameter {Float, Integer, Text, Time, Timestamp, Unknown-Placeholder},
  this.table {encode-float, encode-text, encode-time, get-column-by-name, get-row-size, table},
  time.time {get-time, time, to-ISO8601-local},
  static {
    insert-author,
    reset,
    select-author,
  },
}

define get-conninfo(): this.connection.conninfo {
  Conn-Info of {
    host := *"127.0.0.1",
    port := *"5432",
    dbname := *"sample",
    user := *"username",
    password := *"password",
  }
}

define insert-author(name: &text, some-value: float, now: time): command(unit) {
  Command of {
    template := include-text(insert-author),
    parameters := {
      [
        Pair("__NAME__", Text(*name)),
        Pair("__SOME_VALUE__", Float(some-value)),
        Pair("__MY_TIME__", Time(*"11:23")),
        Pair("__TIMESTAMP__", Timestamp(now)),
      ]
    },
    result-encoder := {
      function (_: &table) {
        Right(Unit)
      }
    },
  }
}

data author {
| Author(
    name: text,
    value: float,
    created-at: time,
  )
}

define select-author(limit: int): command(list(author)) {
  Command of {
    template := include-text(select-author),
    parameters := {
      [
        Pair("__LIMIT__", Integer(limit)),
        Pair("__EPOCH__", Timestamp(time.time.Time of {seconds := 0, nanoseconds := 0})),
      ]
    },
    result-encoder := {
      function (res: &table) {
        let row-size = get-row-size(res);
        try author-name-column = get-column-by-name(res, "name");
        try author-value-column = get-column-by-name(res, "some_value");
        try author-created-at-column = get-column-by-name(res, "created_at");
        iterate-E(row-size, function (r) {
          try name = encode-text(res, r, author-name-column);
          try value = encode-float(res, r, author-value-column);
          try created-at = encode-time(res, r, author-created-at-column);
          Right(Author(name, value, created-at))
        })
      }
    },
  }
}

define _print-authors(xs: list(author)): unit {
  match xs {
  | Nil =>
    Unit
  | Cons(Author(name, value, created-at), rest) =>
    pin name' = name;
    pin value' = show-float(value);
    pin time = to-ISO8601-local(created-at, 6);
    print(name');
    print(" ");
    print(value');
    print(" ");
    print-line(time);
    _print-authors(rest)
  }
}

define main(): unit {
  let !n = get-time();
  let conn-or-none = connect(get-conninfo());
  match conn-or-none {
  | Right(conn) =>
    let result on conn =
      with-transaction(conn, function () {
        try _ = batch(conn, include-text(reset));
        try _ = execute(conn, insert-author("Virginia Woolf", 2.2, !n));
        try _ =
          execute(conn, insert-author(
            "Aristotle",
            1.12,
            time.time.Time of {seconds := -9999999, nanoseconds := 123456789},
          ));
        try _ = execute(conn, insert-author("李白", 3.38, !n));
        try _ = execute(conn, insert-author("Emily Dickinson", 0002.123456789, !n));
        try _ = execute(conn, insert-author("宮沢賢治", 3333333.222, !n));
        try _ = execute(conn, insert-author("Stefan Zweig", -1234.56789, !n));
        execute(conn, select-author(20))
      });
    let _ = conn;
    match result {
    | Right(authors) =>
      _print-authors(authors);
      print("success!\n")
    | Left(e) =>
      match e {
      | Command-Error(_, message) =>
        pin message = message;
        print("command-error:\n");
        print(message);
        print("\n");
      | Encoder-Error(_) =>
        print("encoder-error\n")
      | Preparation-Error(e) =>
        match e {
        | Unknown-Placeholder(k) =>
          pin k = k;
          print("preparation-error\nunknown placeholder: ");
          print(k);
          print("\n");
        }
      }
    }
  | Left(Connection-Error(message)) =>
    pin message = message;
    print(message)
  }
}
