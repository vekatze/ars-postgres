import {
  core.c-string {c-string, from-c-string, to-c-string},
  core.text {format},
  core.trick {panic},
  core.type-tag {Opaque, type-tag-to-int},
  this.foreign {CONNECTION_OK},
}

foreign {
  PQconnectdb(pointer): pointer,
  PQstatus(pointer): int,
  PQfinish(pointer): void,
  PQhost(pointer): pointer,
  PQport(pointer): pointer,
  PQdb(pointer): pointer,
  PQuser(pointer): pointer,
  PQpass(pointer): pointer,
  PQerrorMessage(pointer): pointer,
}

data conninfo {
| Conn-Info(
    host: text,
    port: text,
    dbname: text,
    user: text,
    password: text,
  )
}

data connection-error {
| Connection-Error(message: text)
}

nominal {
  connection: type,
  _connection: type,
  connect(c: conninfo): either(connection-error, connection),
}

inline _from-c-string-pointer(p: pointer): text {
  from-c-string(magic cast(pointer, &c-string, p))
}

resource _connection {
  function (ptr: int) {
    let ptr = magic cast(int, pointer, ptr);
    let _ = magic external PQfinish(ptr);
    Unit
  },
  function (ptr: int) {
    let ptr = magic cast(int, pointer, ptr);
    let !host = _from-c-string-pointer(magic external PQhost(ptr));
    let !port = _from-c-string-pointer(magic external PQport(ptr));
    let !dbname = _from-c-string-pointer(magic external PQdb(ptr));
    let !user = _from-c-string-pointer(magic external PQuser(ptr));
    let password = _from-c-string-pointer(magic external PQpass(ptr));
    let new-conn = connect(Conn-Info of {host := !host, port := !port, dbname := !dbname, user := !user, password});
    match new-conn {
    | Right(c) =>
      magic cast(connection, int, c)
    | Left(_) =>
      pin message =
        format(
          "failed to clone the following connection:\nhost={} port={} dbname={} user={} password=<hidden>\n",
          List[!host, !port, !dbname, !user],
        );
      panic(message)
    }
  },
  type-tag-to-int(Opaque),
}

data connection {
| _Connection(_connection)
}

define connect(c: conninfo): either(connection-error, connection) {
  let Conn-Info of {host, port, dbname, user, password} = c;
  pin conn-text =
    format("host={} port={} dbname={} user={} password={}", List[
      host,
      port,
      dbname,
      user,
      password,
    ]);
  let conn-text = to-c-string(conn-text);
  let conn on conn-text = magic external PQconnectdb(magic cast(&c-string, pointer, conn-text));
  let _ = conn-text;
  let conn = magic cast(pointer, connection, conn);
  let status: int on conn = magic external PQstatus(magic cast(&connection, pointer, conn));
  if eq-int(status, CONNECTION_OK) {
    Right(conn)
  } else {
    let e on conn =
      Connection-Error(_from-c-string-pointer(magic external PQerrorMessage(
        magic cast(&connection, pointer, conn),
      )));
    let _ = conn;
    Left(e)
  }
}
